generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Player {
  id             String       @id @default(uuid()) @db.Uuid
  clerkUserId    String?      @unique
  name           String
  email          String       @unique // Nullable since email might be optional
  homePark       String?
  currentPark    String?
  categoryRank   String?
  overallRank    Int?
  tournaments    Tournament[] @relation("PlayerTournaments")
  matchesAsTeamA Match[]      @relation("PlayersTeamA")
  matchesAsTeamB Match[]      @relation("PlayersTeamB")
  timeouts       Timeout[]

  @@map("players")
}

model TournamentDirector {
  id          String       @id @default(uuid()) @db.Uuid
  clerkUserId String?      @unique
  name        String
  email       String       @unique
  phoneNumber String       @unique
  rating      Int?
  tournaments Tournament[] @relation("DirectorTournaments")

  @@map("tournament_directors")
}

model Tournament {
  id           String             @id @default(uuid()) @db.Uuid
  name         String             @unique
  date         DateTime
  type         String
  createdById  String?            @db.Uuid
  totalPlayers Int?
  price        Int?
  fbUrl        String?
  matches      Match[]
  players      Player[]           @relation("PlayerTournaments")
  location     String
  directorId   String             @db.Uuid
  director     TournamentDirector @relation(fields: [directorId], references: [id], name: "DirectorTournaments")

  @@map("tournaments")
}

enum GameType {
  SINGLES
  DOUBLES
}

enum MatchType {
  POINTS_21
  POINTS_25
  POINTS_11
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Match {
  id            String     @id @default(uuid()) @db.Uuid
  matchType     String
  gameType      Int
  playersTeamA  Player[]   @relation("PlayersTeamA")
  playersTeamB  Player[]   @relation("PlayersTeamB")
  scoresTeamA   Int
  scoresTeamB   Int
  status        String
  scheduledTime DateTime
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  String     @db.Uuid
  timeouts      Timeout[]

  @@map("matches")
}

model Timeout {
  timeoutId        String   @id @default(uuid()) @db.Uuid
  match            Match    @relation(fields: [matchId], references: [id])
  matchId          String   @db.Uuid
  player           Player   @relation(fields: [playerId], references: [id])
  playerId         String   @db.Uuid
  timeoutType      String
  timeoutDuration  String // Storing interval as String, Prisma doesn't support interval type
  timeoutTimestamp DateTime

  @@map("timeouts")
}
